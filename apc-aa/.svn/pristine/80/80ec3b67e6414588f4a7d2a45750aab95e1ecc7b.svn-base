<html><head>
      <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
   <title>Anonymous forms</title><link rel="stylesheet" href="html.css" type="text/css"><meta name="generator" content="DocBook XSL Stylesheets V1.60.1"></head><body bgcolor="white" text="black" link="#0000FF" vlink="#840084" alink="#0000FF"><div class="article" lang="en"><div class="titlepage"><div><div><h2 class="title"><a name="d0e1"></a>Anonymous forms</h2></div><div><div class="author"><h3 class="author"><span class="firstname">Jakub</span> <span class="surname">Ad&aacute;mek</span></h3><div class="affiliation"><span class="orgname">Econnect<br></span></div></div></div><div><p class="releaseinfo">$Id$</p></div><div><div class="revhistory"><table border="1" width="100%" summary="Revision history"><tr><th align="left" valign="top" colspan="2"><b>Revision History</b></th></tr><tr><td align="left">Revision 1.4</td><td align="left">29.3.2003</td></tr><tr><td align="left" colspan="2">Slightly updated the info about the wizard, added a warning about two forms in one page to Tips and Tricks.</td></tr><tr><td align="left">Revision 1.3</td><td align="left">8.3.2003</td></tr><tr><td align="left" colspan="2">Added the Filler and fillform section.</td></tr><tr><td align="left">Revision 1.2</td><td align="left">6.3.2003</td></tr><tr><td align="left" colspan="2">Added tips and tricks based on the FAQ description of the previous anonymous forms</td></tr><tr><td align="left">Revision 1.1</td><td align="left">6.3.2003</td></tr><tr><td align="left" colspan="2">Added links to doc/script/show_result.php3</td></tr><tr><td align="left">Revision 1.0</td><td align="left">15.2.2003</td></tr><tr><td align="left" colspan="2">Separated from the Reader management document</td></tr></table></div></div></div><div></div><hr></div><div class="toc"><dl><dt>1. <a href="#d0e71">General usage of Anonymous Forms</a></dt><dt>2. <a href="#d0e81">Filler and fillform</a></dt><dt>3. <a href="#d0e95">Creating Anonymous Forms with the Wizard</a></dt><dt>4. <a href="#d0e155">Editing with anonymous forms</a></dt><dt>5. <a href="#d0e218">Tips and tricks</a></dt><dt>6. <a href="#d0e250">Reader management specifics</a></dt><dt>7. <a href="#d0e268">Show results</a></dt></dl></div><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p><span class="emphasis"><em>This file was created from the DocBook XML source. Please do modifications in the source, not here.</em></span></p></div><div class="abstract"><p class="title"><b>Abstract</b></p><p>Explains the basic idea, creation and settings of Anonymous forms. The name &#8220;<span class="quote">anonymous</span>&#8221; is in some cases not accurate, as the form is used for reader personal info and the readers must be authorized to edit their own info.</p><p>See also: <a href="reader.html" target="_top">doc/reader.html</a>, <a href="alerts.html" target="_top">doc/alerts.html</a>, doc/script/show_result.php3</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e71"></a>1.&nbsp;General usage of Anonymous Forms</h2></div></div><div></div></div><p>Anonymous forms are similar in function and design to the Add / Edit item page. The main difference is they are placed outside of the AA Control Panel and thus do not provide the AA authorization and have a design of their own.</p><p>The most common usage is to allow web readers to suggest new content. After filling the Anonymous form it is sent to the Holding Bin and a <span class="emphasis"><em>Thank you</em></span> page appears. But you can also allow readers to edit items with the Anonymous form.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e81"></a>2.&nbsp;Filler and fillform</h2></div></div><div></div></div><p>Two scripts handle the anonymous forms. The first, <tt class="constant">filler.php3</tt>, stores the info coming from the form into the database. It also validates the data and prooves permissions to edit or update the item. The second, <tt class="constant">fillform.php3</tt>, refills the data into the form shown to the reader. It retrieves the data from database or in some special cases directly from <tt class="constant">filler</tt>.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e95"></a>3.&nbsp;Creating Anonymous Forms with the Wizard</h2></div></div><div></div></div><p>In the previous AA versions until version 2.4, the process of creating Anonymous forms was very simple: Copy the code of the &#8220;<span class="quote">Add item</span>&#8221; page with only a few necessary changes. But as the form now allows to edit items and to use several options for it, a new wizard was created. This wizard creates the HTML code for a complete form with the SSI include of <tt class="constant">fillform.php3</tt> necessary to edit items. The resulting form differs depending on whether Anonymous editing is allowed or not.</p><p>You may change these settings in the wizard or later in hidden fields:</p><div class="table"><a name="d0e108"></a><p class="title"><b>Table&nbsp;1.&nbsp;Wizard settings</b></p><table summary="Wizard settings" border="1"><colgroup><col><col></colgroup><tbody><tr><td>err_url</td><td>The URL to which the script <tt class="constant">filler.php3</tt> jumps when some error occurs. It may be the same page on which the form is shown.</td></tr><tr><td>ok_url</td><td>Like err_url, for successful changes.</td></tr><tr><td>show_result</td><td>The URL of a PHP script which receives the results from <tt class="constant">filler.php3</tt>. This allows for a completely free design of how the errors are presented to the user. See <a href="#show_results">below</a>.</td></tr></tbody></table></div><p>If you are interested to know more about what the form contains, here are some remarks:</p><div class="itemizedlist"><ul type="disc"><li>The fields shown in AA but not shown in the anonymous form are mentioned in the <tt class="constant">notshown[v7377697463682e2e2e2e2e2e2e2e2e2e]</tt> hidden variables. This allows to set these fields to default values on posting and to store old values on updating.</li><li>The setting <tt class="constant">use_post2shtml</tt> allows to use the POST method for the form even though it is on a shtml page. See more info in the script <tt class="constant">post2shtml.php3</tt>.</li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e155"></a>4.&nbsp;<a name="edit_options"></a>Editing with anonymous forms</h2></div></div><div></div></div><p>If you want to edit items with anonymous forms, first you must allow to choose which item to edit. You can create a view and add a link to the headlines, which links to the anonymous form and contains the parameter <tt class="constant">my_item_id=_#ITEM_ID_</tt>. Another approach is used in Reader management slices, see below.</p><p>You must choose the correct setting in Slice Admin - Settings - Allow anonymous editing of items, which is used by the <tt class="constant">filler.php3</tt> script on an item update request. The options are:</p><div class="table"><a name="d0e169"></a><p class="title"><b>Table&nbsp;2.&nbsp;Anonymous editing options</b></p><table summary="Anonymous editing options" border="1"><colgroup><col><col></colgroup><tbody><tr><td>Not allowed</td><td>Never allow to update items</td></tr><tr><td>All items</td><td>Always allow</td></tr><tr><td>Only items posted anonymously</td><td>For items posted anonymously, <tt class="constant">filler</tt> always sets the <tt class="constant">ITEM_FLAG_ANONYMOUS_EDITABLE</tt> flag. By choosing this option you allow only items with this flag set to be edited.</td></tr><tr><td>Only items posted anonymously and not edited in AA</td><td>Similar to the previous one, but when you edit the item in the control panel, the flag is cleared and thus the item is no more allowed to be edited anonymously.</td></tr><tr><td>Authorized by a password field</td><td><tt class="constant">filler</tt> looks for a field of type Password (with Id beginning with <tt class="constant">password....</tt>) and requests the password sent by the user to match. The password may be set on item creation. If the field is not flagged required, an empty password may be used. The new Field Input Type, Field Insert Function and Field Validate Functions &#8220;<span class="quote">Password and Change Password</span>&#8221; provide the usual edit boxes for changing, deleting and entering password, which is stored encrypted. The disadvantage is the password must be sent on every update.</td></tr><tr><td>Readers, authorized by HTTP auth</td><td>This is a special option, useful only for Reader management slices. The username given to the browser on HTTP authentification is looked for in the database. Each reader may edit only his or her personal info.</td></tr></tbody></table></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e218"></a>5.&nbsp;Tips and tricks</h2></div></div><div></div></div><div class="itemizedlist"><ul type="disc"><li><p>It is possible to send images and other files by the form (unlike the anonymous posting in version prior 1.5)</p></li><li><p>It is possible to set values to a non-displayed field by just adding a hidden field for such a field:</p><pre class="screen">&lt;input type=hidden name="v696d675f6865696768742e2e2e2e2e2e" value="Anonymous author"&gt;</pre><p><span class="emphasis"><em>Note:</em></span> This solution is easy and good working in many cases, but it is by no means secure. Any experienced user can change the values of the hidden fields so do not rely on such data. A better solution is to completely omit such fields from the input form and set the default values for the fields in "Admin" -&gt; "Main setting - Fields" -&gt; "Edit" -&gt; "Default". The values are than set directly from the database. This solution is a little bit more secure.</p></li><li><p>The inputs are validated as if they were typed in the standard <tt class="constant">itemedit.php3</tt> form. When there are any invalid data, the whole item is not updated. The javascript validation used in <tt class="constant">itemedit.php3</tt> is also included in the form created by the wizard</p></li><li><p>You can disable the standard AA validation by adding a hidden field notvalidate in the form: </p><pre class="screen">&lt;input type=hidden name="notvalidate" value="1"&gt;</pre></li><li><p>Be cautious when using two anonymous forms on one page. You must rename the form and the Javascript variables so that they do not conflict with each other.</p></li></ul></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e250"></a>6.&nbsp;Reader management specifics</h2></div></div><div></div></div><p>Each reader has her or his own item in the Reader management slice. Thus the HTTP authentication described above may be used directly to determine which item (reader personal details) to show in the form.</p><p>In this case two forms are needed, one being the publicly accessible subscribe form and the second being the HTTP protected &#8220;<span class="quote">Change personal details</span>&#8221; form. Because the fields on both the forms may be the same, you can use one form and include it into two different .shtml pages.</p><p>For webs not using Auth we need a way to ensure nobody not only edits but even views the data. This is achieved by assigning a special &#8220;<span class="quote">Access Code</span>&#8221; (<a href="reader.html" target="_top">see the Reader management documentation</a>) to each reader, which must be added to the URL in order that the data are prefilled. The password authorization described above is than used on item update.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a name="d0e268"></a>7.&nbsp;<a name="show_results"></a>Show results</h2></div></div><div></div></div><p>Sending the data to AA results in adding the data into database or in an error. Some of the errors may be excluded in advance by Javascript validation (function <tt class="constant">proove_fields</tt>). But some of them, like a username being already used, can not.</p><p>By default, the <tt class="constant">fillform.php3</tt> script shows standard error messages. They always appear at the place where <tt class="constant">fillform.php3</tt> is SSI-included in your shtml page.</p><p>You may create your own PHP script (see an example in <tt class="constant">doc/script/show_result.php3</tt>) and send its URL as a value of a <tt class="constant">show_result</tt> variable. Add it as a parameter to the <tt class="constant">fillform.php3</tt> SSI include created by the Wizard, e.g. </p><pre class="screen">&lt;!--#include virtual="/aaa/fillform.php3?show_result=http://ecn.cz/show_result.php3&amp;form=..."--&gt;</pre><p>An array <tt class="constant">$result</tt> with the results will be sent to the PHP script and you may print appropriate messages, see the example.</p><p>The <tt class="constant">$result</tt> array content is created at various places in <tt class="constant">filler.php3</tt> array. Look there for accurate info. At this moment the messages are:</p><div class="table"><a name="d0e310"></a><p class="title"><b>Table&nbsp;3.&nbsp;Results from filler.php3</b></p><table summary="Results from filler.php3" border="1"><colgroup><col><col></colgroup><tbody><tr><td>fatal</td><td>Fatal error. Several messages related to the slice, not to the particular item. These errors help on creating the web page.</td></tr><tr><td>validate</td><td>Array with not validated fields, <tt class="constant">field_id =&gt; message</tt>, e.g. <tt class="constant">headline........ =&gt; This username is already used</tt> created on field validation. You may create your own messages depending on the <tt class="constant">field_id</tt>.</td></tr><tr><td>permissions</td><td>Missing permissions. Depending on the setting for Anonymous editing (<a href="#edit_options">see above</a>), this item did not fullfill the requirements.</td></tr><tr><td>store</td><td>Some error in StoreItem. Usually this points to an inner AA error.</td></tr><tr><td>success</td><td>No error. The operation was successfully done. The value is &#8220;<span class="quote">insert</span>&#8221; or &#8220;<span class="quote">update</span>&#8221; (i.e. <tt class="constant">$result["success"] == "insert"</tt> or <tt class="constant">$result["success"] == "update"</tt> in the show results script).</td></tr><tr><td>email_confirmed</td><td>Added by <tt class="constant">fillform.php3</tt> on Reader management slices: When the reader successfully confirms his or her email by using the URL sent in an email, <tt class="constant">fillform</tt> adds a message &#8220;<span class="quote">email_confirmed =&gt; OK</span>&#8221;. This message is added only when the email has not yet been confirmed.</td></tr><tr><td>unsubscribed</td><td>Added by <tt class="constant">fillform.php3</tt> on Reader management slices: When the reader unsubscribes from Alerts (which is achieved by setting How often to an empty value).</td></tr></tbody></table></div><p><span class="bold"><b>Discussion</b></span>: A similar result may be achieved by adding several fields to the form, e.g. fields </p><pre class="screen">err_page[validate][username......]="err_username.shtml"
err_page[validate][*]="err_validate.shtml"
err_page[*]="err_unrecognized.shtml"</pre><p>and by creating the .shtml pages with a static message concerning the particular error. The main advantage of this approach is the web administrator may not know PHP. The disadvantage is the necessity of creating many pages but using SSI includes the pages could look only like:</p><pre class="screen">&lt;!--#include file="err_top.shtml"--&gt;
The username you entered has already been used. Please try another username.
&lt;!--#include file="err_bottom.shtml"--&gt;</pre></div></div></body></html>